#+TITLE: Scala 3 通用代数类型 (GADT)
#+Date: <2020-03-30 Mon>
#+AUTHOR: 欧阳继超
#+OPTIONS: ^:t
#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+PROPERTY: header-args :eval never-export
#+KEYWORDS: Scala,Dotty,Haskell,Scala 3,Phantom Types
#+HTML_HEAD_EXTRA: <meta property="og:title" content="Scala 3 通用代数类型" />
#+HTML_HEAD_EXTRA: <meta property="og:description" content="你可能不再需要 Cats" />
#+HTML_HEAD_EXTRA: <meta property="og:type" content="article" />
#+HTML_HEAD_EXTRA: <meta content="https://blog.oyanglul.us/images/dotty-logo.png" property="og:image">
#+description: 你可能不再需要 Cats
#+index: Scala!Scala 3 通用代数类型
#+index: Dotty!Scala 3 通用代数类型
#+index: Phantom Types!Scala 3 通用代数类型
#+index: FP!Scala 3 通用代数类型
#+index: Catergory Theory!Scala 3 通用代数类型

[[./GADT.org][中文]] | [[./en/GADT.org][English]]

#+INCLUDE: !toc.org

我们都知道 {{{ruby(ADT,Algebraic Datatypes)}}} 指的是 Coproduct 类型, 也就是由多个构造函数返回一种类型, 比如:

#+BEGIN_SRC scala
  enum List[+A]{
    case Nil
    case Cons(head: A, tail: List[A])
  }
#+END_SRC

这是普通的 ADT, 也就是 =Nil= 和 =Cons= 构造出来的类型是固定的.

但是如果对类型有一些特别的需求, 这种 ADT 就难以满足, 幸运的是 Scala 3 的 enum 本身就是 GADT.[fn:1]

然我们来定义一个类型更安全的 List, 叫 =SafeList=
#+BEGIN_SRC scala -n -r
  enum Size {
    case Empty
    case NonEmpty
  }

  enum SafeList[+A, +S <: Size] {
    case Nil extends SafeList[Nothing, Size.Empty.type] // <- (ref:nil)
    case Cons(head: A, tail: SafeList[A, Size]) extends SafeList[A, Size.NonEmpty.type]
  }
#+END_SRC

你看 [[(nil)][这行]] 就不是默认的返回类型 =List[Nothing]= , 我们可以定制这个类型为 =SafeList[Nothing, Size.Empty,type]=, 来在类型上表示
该 list 为空.

同样的我们把 Cons 的返回类型写死成 =SafeList[A, Size.NonEmpty.type]= 表示它不空.

#+BEGIN_SRC scala
  import SafeList._

  def safeHead[A](list: SafeList[A, Size.NonEmpty.type]): A = list match
    case SafeList.Cons(head, tail) => head
#+END_SRC

从类型上看 =SafeList[A, Size.NonEmpty.type]= 只接受 =Size.NonEmpty= 的 list.

所以如果你传个 Nil 进去, 编译器就不乐意了.

#+BEGIN_SRC scala
safeHead(Nil)
#+END_SRC

#+begin_example
Found:    (Main.SafeList.Nil : Main.SafeList[Nothing, (Main.Size.Empty : Main.Size)])
Required: Main.SafeList[Any, (Main.Size.NonEmpty : Main.Size)]
#+end_example

不信? 自己试试吧 https://scastie.scala-lang.org/jcouyang/yGQTSUJ6SN2P2oUsfWu9zw/1

* Footnotes

[fn:1] https://dotty.epfl.ch/docs/reference/enums/adts.html
