#+TITLE: Scala 3 原生 FunctionK
#+Date: <2020-03-22 Sun>
#+AUTHOR: 欧阳继超
#+OPTIONS: ^:t
#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+PROPERTY: header-args :eval never-export
#+KEYWORDS: Scala,Dotty,Haskell,Scala 3,FunctionK,Rank N Types,Rank 2 Types,Polymorphic function types
#+HTML_HEAD_EXTRA: <meta property="og:title" content="Scala 原生 FunctionK" />
#+HTML_HEAD_EXTRA: <meta property="og:description" content="你可能不再需要 Cats" />
#+HTML_HEAD_EXTRA: <meta property="og:type" content="article" />
#+HTML_HEAD_EXTRA: <meta content="https://dotty.epfl.ch/images/dotty-logo.svg" property="og:image">
#+description: 你可能不再需要 Cats
#+index: Scala!Scala 3 原生 FunctionK
#+index: Dotty!Scala 3 原生 FunctionK
#+index: Rank N Types!Scala 3 原生 FunctionK
#+index: FunctionK!Scala 3 原生 FunctionK
#+index: FP!Scala 3 原生 FunctionK
#+index: Catergory Theory!Scala 3 原生 FunctionK
* Scala 2
没有 FunctionK 所以我们需要使用 Cats 的 [[https://typelevel.org/cats/datatypes/functionk.html][FunctionK]] 来做一些事情.[fn:1]

比如:

#+BEGIN_SRC scala
  import cats.~>
  def tupledOptionToList[B,C](a: (Option[B], Option[C]), fnk: Option ~> List): (List[B], List[C])  
#+END_SRC

至于为什么不能直接用普通类型为 ~Option[A] => List[A]~ 的函数而要用 FunctionK 呢? 请看 [[./rank-N-type.org][Rank-N types]].

* Scala 3
在 Dotty 中, 已经实现了 Rank N Types, 叫 [[https://dotty.epfl.ch/blog/2019/06/11/16th-dotty-milestone-release.html#polymorphic-function-types][Polymorphic function types]], 就可以很轻松的定义出 =~>=:

#+BEGIN_SRC scala
// kind * -> *
// FunctionK (* -> *) -> (* -> *)

type ~>[F[_],G[_]] = [A] => F[A] => G[A]

object Main {
  // rank 2 type (forall a. Option a -> List a)
  val optionToList: Option ~> List = [A] => (a: Option[A]) => a.toList
  
  // forall b c. (Option b, Option c) -> (forall a. Option a -> List a) -> (List b, List c)
  def tupledOptionToList[B,C](a: (Option[B], Option[C]), fnk: Option ~> List): (List[B], List[C]) =
      (fnk(a._1), fnk(a._2))
  
  def main(args: Array[String]): Unit = {
    println(
      tupledOptionToList((Some(1), Some("2")), optionToList)
    )
  }
}
#+END_SRC

不需任何cats, 是可以完美编译运行的.

不信? 可以自己在 scastie 上试试: https://scastie.scala-lang.org/jcouyang/W5jIXajVTU64g8KZe8V7Kw/9

* Footnotes

[fn:1] 当 FunctionK[F, G] 的 F 和 G 都是 Functor 时, FunctionK 是 F ~> G 的自然变换.
