#+TITLE: Scala 3 原生 Rank N Types
#+Date: <2020-03-22 Sun>
#+AUTHOR: 欧阳继超
#+OPTIONS: ^:t
#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@
#+PROPERTY: header-args :eval never-export
#+KEYWORDS: Scala,Dotty,Haskell,Scala 3,FunctionK,Rank N Types,Rank 2 Types,Polymorphic function types
#+HTML_HEAD_EXTRA: <meta property="og:title" content="Scala 原生 Rank N Type" />
#+HTML_HEAD_EXTRA: <meta property="og:description" content="你可能不再需要 Cats" />
#+HTML_HEAD_EXTRA: <meta property="og:type" content="article" />
#+HTML_HEAD_EXTRA: <meta content="https://dotty.epfl.ch/images/dotty-logo.svg" property="og:image">
#+description: 你可能不再需要 Cats
#+index: Scala!Scala 原生 Rank N Types
#+index: Dotty!Scala 原生 Rank N Types
#+index: Rank N Types!Scala 原生 Rank N Types
#+index: FunctionK!Scala 原生 Rank N Types
#+index: FP!Scala 原生 Rank N Types
#+index: Catergory Theory!Scala 原生 Rank N Types
* Scala 2
没有 [[https://wiki.haskell.org/Rank-N_types][Rank N Types]], 所以我们需要使用 Cats 的 [[https://typelevel.org/cats/datatypes/functionk.html][FunctionK]] 来做一些事情.

比如:

#+BEGIN_SRC scala
  // forall a b c. (b, c) -> (a -> a) -> (b, c)
  def rank[A,B,C](a: (B, C), doSomething: A => A): (B, C) = (doSomething(a._1), doSomething(a._2))
#+END_SRC

是编译不了的, 因为这只有 rank 1, 数 rank 几 很容易, 有几个forall, 这里只有一个, 也就是, A, B, C 是一个 rank.

同一个 rank 的毛病是, 编译器在看到 =doSomething(a._1)= 时, 由于 ==a._1: B= 时就决定了这时 ~doSomething: B => B~ 就
决定了 A = B, 再看后面的 =doSomething(a._2)= 编译就挂了, 因为我决定好了是 B 了你给我个 C 当然不行.

Scala 2 解决的办法可以通过 Cats 的 FunctionK:

#+BEGIN_SRC scala
def rank[B,C](a: (B, C), doSomething: Id ~> Id): (B, C) = (doSomething(a._1), doSomething(a._2))
#+END_SRC

可以看见 FunctionK 的小诡计把 A 从 =rank[A, B, C= 的类型参数上拿掉了, 也就是编译器完全不需要在编译这个函数的时候确定下来 =doSomething= 的
A 类型是啥.

使用 cats 也不是完全免费, 你在定义 =doSomething= 的时候要多些一堆代码
#+BEGIN_SRC scala
def rankNId: Id ~> Id = new (Id ~> Id) {
  def apply[A](a: Id[A]): Id[A] = a
}
#+END_SRC

定义个 id 这么累, 你可以通过这个过程看到, 哦, 原来 A 类型被藏到这里了.

* Scala 3
但是现在 Dotty 中, 已经实现了 Rank N Types, 叫 [[https://dotty.epfl.ch/blog/2019/06/11/16th-dotty-milestone-release.html#polymorphic-function-types][Polymorphic function types]]

#+BEGIN_SRC scala
  // rank 2 type (forall a. a -> a)
  val id = [T] => (t: T) => t
  
  // forall b c. (b, c) -> (forall a. a -> a) -> (b, c)
  def rank2[B,C](a: (B, C), doSomething: [T] => T => T): (B, C) = (doSomething(a._1), doSomething(a._2))
  
  def main(args: Array[String]): Unit = {
    println(
      rank2((1, "2"), id)
    )
  }
#+END_SRC

是可以完美编译运行的.

不信? 可以自己在 scastie 上试试: https://scastie.scala-lang.org/jcouyang/3hNle3faQ7SpS4mCcoMSGA/29
